Top-level statement
local function (static/non-static)

Configuration in .NET

the configuration services in .NET provides several Configuration Providers for different sources of configuration data:

1. settings files, such as appsettings.json file
2. environment variables
3. command-line arguments
4. custom providers
5. directory files
6. In-memory .NET objects
7. 3rd party providers
8. Azure vault
9. Azure app config

packages: 
implementations: 
	main => Microsoft.Extensions.Configuration
	specific => Microsoft.Extensions.Configuration.Json
		 => Microsoft.Extensions.Configuration.EnvironmentVariables
		 => Microsoft.Extensions.Configuration.Binder

abstractions: Microsoft.Extensions.Configuration.Abstractions

Configuration is read-only and they are designed NOT TO BE WRITABLE

IConfiguration => top-level abstraction for all configuration providers


Options Pattern:
it uses classes to provide strongly typed accessed to a group of related settings.


Logging in .NET



Sql Server 2022 Express Edition (database s/w)
Sql Server Management Studio (SSMS)

Data Access in .NET:
	=> ActiveX Data Object.NET (ADO.NET)
		=> technique to interact with database
		=> data providers (collection of types - classes, interfaces etc. to interact with database)
			=> Connction type (SqlConnection, OracleConnection etc.)
			=> Command type (SqlCommand, OracleCommand etc.)
			=> Reader type (SqlDataReader, OracleDataReader etc.)
			=> Adapter type
		=> data consumers (collection of types - classes, interfaces etc. to store data fetched from any database)
			ex: DataSet, DataColumn, DataRow, DataRelation etc.
			
	=> EF Core

Entity Framework => .NET Framework (legacy)
Entity Framework Core => interact with database => .NET (.Net Core)

EF Core with SQL Server
package: Microsoft.EntityFrameworkCore.SqlServer


Migration:
	.NET Framework => .NET

Portability Analyzer => VS 2017 (Not supported in VS 2022)


check your app depdencies


tool => .NET Upgrade Assistant
ASP.NET
WPF
WinForm
class libraries
console apps
Xamarin apps
.NET MAUI
.NET Native UWP
Azure Functions


upgrade paths:
.NET Framework => .NET
.Net Core (<5) => .NET (>=5)


how upgrade takes place?
1. in-place project upgrade: this will upgrade your project(s) directly without making any copies
2. Side-by-side project upgrade: Copies your project and upgrades the copy. do not change the original project.
3. side-by-side incremental: it will put a .NET project next to the .NET Framework project. endpoints will be routed through the .NET Project, but the calls will be forwarded to the .NET Framework Project

AppDomain
On .NET Core, the AppDomain implementation is limited by design and does not provide isolation, unloading, or security boundaries. For .NET Core, there is exactly one AppDomain. Isolation and unloading are provided through AssemblyLoadContext. Security boundaries should be provided by process boundaries and appropriate remoting techniques.







