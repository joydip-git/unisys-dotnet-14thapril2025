Dependency Injection:
-------------------------------
Tightly coupled code -> loosely coupled code and maintain better cohesion

1. through ctor (.Net core)
2. through property
3. through method

Role of interface in DI:
---------------------------------


Dependency Injection in .Net Core
------------------------------------
Microsoft.Extensions.DependencyInjection.Abstractions
	- abstractions (interfaces, abstract classes)
		- IServiceProvider
		- IServiceCollection

Microsoft.Extensions.DependencyInjection => package
	- implementations (classes)
		- ServiceProvider => built-in service container
		- ServiceCollection => the collection where services and their implementations are registered along with mention of lifetime via 

ServiceDescriptor: describes the service type, implementation type and lifetime of service

How in .Net Core DI works??
-----------------------------------------------
Once all services are added into the service collection, you should use BuildServiceProvider() method of IServiceCollection to create the service container (an instance of ServiceProvider)

ServiceCollection -> IServiceCollection
ServiceProvider   -> IServiceProvider


Service Lifetime: Singleton, Scoped and Transient


about the DI application:
------------------------------------
IReportServiceLifetime
	Guid Id {get;}
	ServiceLifetime Lifetime{get;}

ISingletonService	
ServiceLifetime Lifetime => Singleton

IScopedService	
ServiceLifetime Lifetime => Scoped

ITransientService
ServiceLifetime Lifetime => Transient

SingletonService:ISingletonService	ScopedService		TransientService
Guid Id => Guid.NewGuid()  Guid Id => Guid.NewGuid() Guid Id => Guid.NewGuid()


TransientService ss = new TransientService();


ss.Guid;

TransientService ss1 = new TransientService();
ss1.Guid;

interface IOps
{
  string GetData();
  ....
}


class FirstImpl:IOps
{
  public string GetData(){//code}
}


class SecondImpl:IOps
{
  public string GetData(){//code}
}

Using Generic Host:
---------------------------------------
Host => an object that manages and encapsulates app's resources and lifetime functionality
	- DI
	- Logging
	- Config
	- App graceful shutdown
	-....

Generic Host class: Host
specific host class: WebHost etc.

Hosting packages:
	Microsoft.Extensions.Hosting.Abstractions => contains all the abstractions
	Microsoft.Extensions.Hosting => implementations


Builder pattern => 


House
	=> with garage
	=> with swimming pool
	=> with garden
	.......
class House
{
	public House(windows,doors,walls,roof,garage,pool,garden)
	{
		
	}
}


House myHouse = new House(4,2,4,1,null,null,...);

House
	HouseWithGarden:House
		HouseWithSwimmingPool:HouseWithGarden
			HouseWithGarage:HouseWithSwimmingPool
				HouseWithSomethingExtra:HouseWithGarage


Builder Pattern

SimpleHouseBuilder
	BuildWalls()
	BuildWalls()
	BuildWalls()
	BuildWalls()
	BuildWalls()

LuxuryHouseBuilder


Command Line Interface Tool: dotnet
-------------------------------------------------

adding packages:
1. using project file and the add the following in <ItemGroup> element
	<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.4" />

2. use dotnet cli to add package reference
project-dir>dotnet add package Microsoft.Extensions.DependencyInjection --version 10.0.0-preview.3.25171.5

3. using Nuget package manager console
>NuGet\Install-Package Microsoft.Extensions.DependencyInjection -Version 10.0.0-preview.3.25171.5


4. using nuget package manager in VS