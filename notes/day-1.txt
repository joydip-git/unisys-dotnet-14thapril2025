DotNet Core => .NET

Microsoft
90's => Component Object Model (VB 6.0, VC++)
	library: Type Libraries (.tlb)
	languages: VB 6.0, VC++ , etc.
	tool: Visual Studio
	web tech: ASP
	data access tech: ADO, DAO, RDO
	distributed techs: DCOM+

Java

.NET Framework [2002-2019/20]
	library: Base/Framework Class Library (.dll)
	web tech: ASP.NET
	data access tech: ADO.NET
	distributed tech: Web Services, Remoting and Component Service
	desktop based techs: WinForm etc.
	runtime: Common Language Runtime

	languages: VC#.NET, VB.NET, VC++.NET, VF#.NET, VJ#.NET etc.
	tools: Visual Studio .NET (IDE)

	source code => CSC/VBC/VCC compilers => CIL code (machine independent language code - common intermediate language)
	IL/CIL/MSIL => platform neutral code
	
	C# data type => IL data type (Common Type System)
	int x=10; => 		Int32 x = 10;
	dim x as Integer=10 => 	Int32 x = 10;	

	sc file (.cs/.vb/..) => after compilation => *.dll (app without Main) or *.exe (app with Main) [output file - assembly -> reusable and standalone]

	runtime s/w: mscoree.dll
	IL code => Just-In-Time compiler (runtime compiler) => Machine Level Language Code (binary)

	mscorlib.dll
	mscoree.h => C++ header file contains method to load specific version of CLR to load (mscoree.dll)
	


Year	fv     rtv
2002 	=> 1.0 => 1.0
2003 	=> 1.1 => 1.0
2005 	=> 2.0 => 2.0
2007 	=> 3.0 => 2.0 [WPF -> desktop app, WCF -> common platform to create distributed apps and apps supporting SOA, WF -> ]
2008 	=> 3.5 => 2.0 [ASP.NET AJAX + LINQ]
2010 	=> 4.0 => 4.0 [ASP.NET MVC etc.]
2012/13 => 4.5 => 4.0 [Xamarin]
2015/16	=> 4.6 => 4.0 
2017    => 4.7 => 4.0
2019    => 4.8 => 4.0.30...


Network Enabled Technologies

com, in, net, org

jQuery => JS library
JS runtime

chrome JS engine => V8 (open source)

Ryan Dahl => Node JS (a JS runtime having a JS engine)

JS code => Node JS => output
2009 => Angular JS, React JS, Vue JS, Express JS, etc...

2016 => 
	".Net Core" 1.0 - 3.1
		.NET Core runtime
			.NET Desktop runtime => winform, wpf etc.
			ASP.NET	Core runtime => web app	
	Core Library
	web tech: ASP.Net Core
	data access tech: ADO.NET and Entity Framework Core
	desktop based

	VS Code + Visual Studio	

smaller packages:
	system.console.dll
	system.collections.dll

data: system.data.sqlclient.dll


sc file (.cs/.vb/..) => after compilation => 
	*.dll (app without Main or app with Main) [output file - assembly -> reusable and standalone] +
	.exe file (NOT AN assembly)

executable => output file *.dll + .exe (host)
library    => output file *.dll

.Net core re-branded as .NET 
.NET 5.0, 6, 7, 8, 9, 10,...


.NET 9.0
--------------------
IDEs: Visual Studio 2022 (>=17.3.0) and Visual Studio Code

word1-word2

Roslyn compiler => for VB.NET and VC#.NET code

SC => compiler (Roslyn) => output file with IL code and many other things (*.dll)
if this is an executable type app (console, windows app etc.) an exra .exe file will be created to host the .dll file in the proces that is created for that exe
this output file is also known as Assembly and you can view the content of an assembly using a tool provided with legacy framework => ILDASM
ILDASM tool -> Intermediate Laguage DisAssembler

Assembly segments:
1. IL Code => kind of assembly level language code. direct convert from source code (high level language code) by compiler (Roslyn)
2. Assmebly Metadata (Manifest)
3. CLR Header is part of assembly and contains information about which .NET version was used to create the app. accordingly required version of .NET runtime will be loaded in the process memory.
4. Type Metadata (Metainfo) => information or metadata about the code written in this application
5. Otional 32 bit header (windows header)

solution file (*.sln) => file containing references to one or multiple projects. its like a container, where projects are added.

   project file (*.csproj)
	source code files
	dependencies
	output folder (bin)
	   net9.0
	     .dll file (asembly)
	     .exe file (host - optional, in case of executable apps)
	     .json files	


class objects in C#:
ClassName <ref-var-name> = new Class-Ctor-Name(args...);
1. memory blocks for the data members are allocated in the heap by runtime (memory starts from the address, which is pointed by Next Object Pointer)
2. constructor is called and supplied values (to the ctor) are assigned to the member memory blocks
3. NOP is adjusted in the heap to point to a free space, from which next object memory block can be allocated


		data types
value types			reference types
---------------------------------------------------
built-in user defined		built-in user-defined
----------------------------------------------------------
byte	  struct		Object		class
sbyte     enum			string		interface
short				....		delegate
ushort						event
int
unit
long
ulong

decimal
float
double

bool
char
DateTime
TimeSpan
..............


operators and control flow statements

class access specifiers: public and internal
class member access specifiers: public, private, protected, internal etc.
	1. Data members
	2. Methods
	3. Properties: read-only, write-only, rw properties



	